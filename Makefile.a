# 🧰 Makefile - https://github.com/vampy/Makefile
# Simplifies developer setup, testing, linting, and packaging.

# Structure Tree
export ROOT_DIR := $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST)))))
export COUNTER_FILE := ${ROOT_DIR}/installer/tmp/msg_count.state
TESTS_DIR	:= ${ROOT_DIR}/tests
SRC_DIR 	:= ${ROOT_DIR}/src
SDF_DIR 	:= ${ROOT_DIR}/data/sdf
VENV    	:= .venv
DOTENV 		:= ${ROOT_DIR}/.env

# Variables & Imports
PYTHON	:= $(shell command -v python3 2>/dev/null || command -v python || command -v py)
SHELL 		:= /bin/bash
USE_VENV	:= . $(VENV)/bin/activate
PACKAGE 	:= magBridge

# Special Makefile Variables - https://www.gnu.org/software/make/manual/html_node/Special-Variables.html
.PHONY: _init help install dev test lint format typecheck build clean reset dotenv
.DEFAULT: install

# 📘 Help Info, API
help:
	@echo ""
	@echo "Mag-Bridge Development Commands:"
	@echo "--------------------------------"
	@echo "make install      – Create venv, install requirements"
	@echo "make dev          – Install dev tools (pytest, ruff, mypy)"
	@echo "make test         – Run pytest with full traceback and color"
	@echo "make lint         – Run Ruff linter"
	@echo "make format       – Format code using Ruff"
	@echo "make typecheck    – Run mypy type checks"
	@echo "make build        – Build package wheel and sdist"
	@echo "make clean        – Remove build artifacts"
	@echo "make reset        – Delete venv and rebuild everything"
	@echo ""

# 🧩 Environment Setup
install:  venv pip dotenv
	load_menu
	log "✅ Developer setup complete."
	printf "Using Python: "; printf "$(PYTHON)" | color --grey

venv: 
	load_menu
	log "🐍 Creating Python .venv"
	@$(PYTHON) -m venv $(VENV)

pip: 
	load_menu
	log "🚀 Upgrading pip"
	@$(USE_VENV); pip install --quiet --upgrade pip
	log "🧩 Installing pip requirements"
	@$(USE_VENV); pip install --quiet -r requirements.txt -r requirements-dev.txt

dotenv: 
	load_menu
	echo "PYTHONPATH=${ROOT_DIR}:${SRC_DIR}:${TESTS_DIR}" > ${DOTENV}
	echo "ROOT_DIR=${ROOT_DIR}" >> ${DOTENV}
	echo "SRC_DIR=${SRC_DIR}" >> ${DOTENV}
	echo "TESTS_DIR=${TESTS_DIR}" >> ${DOTENV}
	echo "SDF_DIR=${SDF_DIR}" >> ${DOTENV}
	[[ -f ${DOTENV} ]] && log "📝 .env file created." || log "❌ .env missing!"

# 🧪 Testing
test:
	@echo "🧪 Running tests..."
	@$(USE_VENV) && pytest -ra -q --tb=long --color=yes $(TESTS_DIR)

# 🧹 Code Quality
lint:
	@echo "🧹 Formatting code with Ruff..."
ifeq ($(filter --dry-run,$(MAKECMDGOALS)),--dry-run)
	@$(USE_VENV) && ruff format --check $(SRC_DIR)
	@echo "✅ Dry run: no files modified."
else
	@$(USE_VENV) && ruff format $(SRC_DIR)
	@echo "✅ Formatting complete."
endif

typecheck:
	@echo "🔎 Type checking with mypy..."
	@$(USE_VENV) && mypy $(SRC_DIR)

# 📦 Build & Cleanup
build:
	@echo "📦 Building distribution package..."
	@$(USE_VENV) && python -m build
	@echo "✅ Build complete – files in dist/"

clean:
	@echo "🧽 Cleaning build artifacts..."
	rm -rf dist build *.egg-info

reset: 
	@if echo " $(MAKECMDGOALS) " | grep -q -E "(^|[[:space:]])--yes([[:space:]]|$$)"; then \
		yn="y"; \
	else \
		read -p "Proceed with removal? [y/N] " yn; \
	fi; \
	if [ "$$yn" = "y" ]; then \
		printf "\033[1A\033[2K"; \
		printf "Proceed with removal? [y/N] y"; \
		for color in 31 33 32 36 34 35; do \
			printf "\033[1;$${color}m.\033[0m"; \
			sleep 0.2; \
		done; \
		printf "\n"; \
		echo "🧹 Removing Venv..."; \
		sleep 0.3; \
		rm -rf $(VENV); \
		echo "🧹 Removing Python caches..."; \
		sleep 0.4; \
		find . \( -name "__pycache__" -o -name "*.pyc" -o -name "*.pyo" \) -exec rm -rf {} +; \
		echo; \
		echo "🧩 Please restart your terminal for these changes to take place"; \
		echo "- VS Code: \033[90mCtrl+Shift+P → 'Reload Window'\033[0m"; \
		echo "- PyCharm: \033[90mFile → Invalidate Caches → Restart\033[0m\n"; \
		echo "Then run:"; \
		printf "	\033[1;32mmake dev\033[0m\n"; \
	else \
		echo "Reset skipped."; \
	fi

# Options
editable:
# 	Any changes to the original package would reflect directly in local environment
	log "🚀 Activating Editable Mode"
	@$(USE_VENV); pip install --quiet --editable .

# define load_menu
# 	load_menu_inner() {
# 		if [ "$(STRAPPED)" = "0" ]; then
# 			. $(ROOT_DIR)/installer/counter.sh
# 			. $(ROOT_DIR)/installer/logging.sh
# 			$(eval STRAPPED := 1)
# 		fi

# 		if [[ "$${1:-}" == "--start-msg-counter" ]]; then
# 			start_msg_counter
# 		fi
# 	}

# 	load_menu_inner "$$@"
# endef
